import Head from 'next/head'
import styles from '@/styles/Home.module.css'
import { useEffect, useRef, useState } from 'react'
import axios from 'axios'
import socketIOClient from 'socket.io-client';

export default function Home() {

  const [job, setJob] = useState('')
  const [results, setResults] = useState([])
  const [loader, setLoader] = useState(false)
  const [items, setItems] = useState([])

  const ref1 = useRef(null)
  const socket = socketIOClient('http://localhost:4000');



  socket.on('connect', () => {
    console.log('Connected to stream');
  });

  let arr = []
  socket.on('products', (response) => {
    // const range = document.createRange();
    // const fragment = range.createContextualFragment(response);
    // ref1.current.appendChild(fragment);
    console.log('asdf',response)
    setItems(prevItems => [...prevItems, response])
  })


  const handleJob = async () => {
    setResults([])
    if (job == '') {
      return
    }
    let query2 = job
    setLoader(true)
    const res = await axios.get(`http://localhost:4000/products/?name=${query2}`);
    const response = res.data

  }


  const handleSubmit = () => {

  }



  return (
    <>
      <Head>
        <title>Amazon Scrapper</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={styles.main} style={{ gap: '0.5rem' }}>
        <form onSubmit={(e) => {
          e.preventDefault()
          handleSubmit()
        }} method="POST">
          <div className="shadow sm:overflow-hidden sm:rounded-md">
            <div className="space-y-6 px-4 py-5 sm:p-6 dark:border-gray-700 dark:text-gray-400  dark:bg-gray-800">
              <div className="grid">
                <div className="w-full flex align-bottom gap-1 justify-end flex-col" style={{ alignItems: 'flex-end' }}>
                  <div className='w-full flex flex-col'>
                    <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Search Products</label>
                    <input type="text" value={job} onChange={(e) => setJob(e.target.value)} id="text" className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block p-2.5 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 w-96" placeholder="Search Products" required />
                  </div>
                  <div style={{ height: 'fit-content' }}>
                    <button onClick={handleJob} className="mt-5 text-white bg-blue-700 hover:bg-blue-800 focus:ring-4 focus:outline-none focus:ring-blue-300 font-medium rounded-lg text-sm w-full sm:w-auto px-5 py-2.5 text-center dark:bg-blue-600 dark:hover:bg-blue-700 dark:focus:ring-blue-800">Submit</button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </form>

        <div style={{ width: '32.5rem' }} className="shadow sm:overflow-hidden sm:rounded-md mt-5">
          <div className="space-y-6 px-4 py-5 sm:p-6 dark:border-gray-700 dark:text-gray-400  dark:bg-gray-800">
            <div className="grid">
              <div className="w-full flex flex-col">
                <label className="block mb-2 text-sm font-medium text-gray-900 dark:text-white">Results</label>
                <div>
                  {
                    <div id='resultroot' ref={ref1}>
                      {
                        items?.map((item, i) => {
                          return (
                            <div key={i} dangerouslySetInnerHTML={{ __html: item.toString() }} />
                          )
                        })
                      }
                    </div>
                  }
                </div>
              </div>
            </div>
          </div>
        </div>
      </main>
    </>
  )
}